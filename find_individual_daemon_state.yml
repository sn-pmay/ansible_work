- hosts: all  
  gather_facts: no    
  vars: 
    lacpd_status_query: "Object.FlexDaemons[?Name=='lacpd'].Enable"
    ndpd_status_query: "Object.FlexDaemons[?Name=='ndpd'].Enable"
    ribd_status_query: "Object.FlexDaemons[?Name=='ribd'].Enable"
    fMgrd_status_query: "Object.FlexDaemons[?Name=='fMgrd'].Enable"
    stpd_status_query: "Object.FlexDaemons[?Name=='stpd'].Enable"
    vxland_status_query: "Object.FlexDaemons[?Name=='vxland'].Enable"
    confd_status_query: "Object.FlexDaemons[?Name=='confd'].Enable"
    vrrpd_status_query: "Object.FlexDaemons[?Name=='vrrpd'].Enable"
    ospfv2d_status_query: "Object.FlexDaemons[?Name=='ospfv2d'].Enable"
    asicd_status_query: "Object.FlexDaemons[?Name=='asicd'].Enable"
    platformd_status_query: "Object.FlexDaemons[?Name=='platformd'].Enable"
    bfdd_status_query: "Object.FlexDaemons[?Name=='bfdd'].Enable"
    arpd_status_query: "Object.FlexDaemons[?Name=='arpd'].Enable"
    sysmgmtd_status_query: "Object.FlexDaemons[?Name=='sysmgmtd'].Enable"
    notifierd_status_query: "Object.FlexDaemons[?Name=='notifierd'].Enable"
    lldpd_status_query: "Object.FlexDaemons[?Name=='lldpd'].Enable"
    statsd_status_query: "Object.FlexDaemons[?Name=='statsd'].Enable"
    dhcprelayd_status_query: "Object.FlexDaemons[?Name=='dhcprelayd'].Enable"
    dhcpd_status_query: "Object.FlexDaemons[?Name=='dhcpd'].Enable"
    bgpd_status_query: "Object.FlexDaemons[?Name=='bgpd'].Enable"
    
  tasks: 
  - name: Get FlexSwitch SystemState
    uri:
      url: "https://localhost:443/public/v1/state/systemstatus"
      method: GET
      status_code: 200
      user: "{{ api_user }}"
      password: "{{ api_password }}"
      force_basic_auth: yes
      validate_certs: no
      return_content: yes
    register: json_response
    # until: bgp_post_result.json.Object.FlexDaemons["Name":"bgpd"] == true
    retries: 10
    tags: 
      - systemstatus

  - name: Save JSON
    delegate_to: localhost
    copy: 
      content: "{{ json_response.content }}" 
      dest: /data/SnapRoute/ansible_work/foo.json

  # - name: Load JSON
  #   meta: noop
  #   body: "{{ lookup('file', 'systemstatus_out.json' }}"
  #   body_format: json
  #   register: json_response
  #   tags:
  #     - systemstatus

  #  - name: Get JSON from the Interwebs                                                                          
  #    uri: url="https://raw.githubusercontent.com/ljharb/node-json-file/master/package.json" return_content=yes  
  #    register: json_response                                                                                    

  # - debug: msg="Error - undefined tag"                                                                         
  #   when: json_response["non_existent_tag"] is not defined                                                     

  # - debug: msg="Success - tag defined =>{{  (json_response.content|from_json)['Object']['FlexDaemons'] }}<="  
  #   when:  (json_response.content|from_json)['Object']['FlexDaemons'] is defined

  # - name: "Get BGPd Enabled setting"
  #   # The json_query language is "JMESPath", which has, as of 2017-08-23, an online tester: http://jmespath.org/
  #   # The online tester shows that there is, in fact, data being returned. 
  #   # Make *sure* that the json_response.content is passed to the 'from_json' filter first. 
  #   # Otherwise, json_query filter won't know what to do with the data!
  #   debug: var=item
  #   with_items: "{{ json_response.content | from_json | json_query(bgpd_status_query) }}"
  #   # with_items: "{{ json_response.content|json_query(bgpd_status_query) }}"
  #   # with_items: "{{json_response.content|json_query('Object.FlexDaemons[*].Name')}}"
  #   # with_items: "{{json_response|json_query('[*]')}}"
  #   vars:
  #     bgpd_status_query: "Object.FlexDaemons[?Name=='bgpd'].Enable"
  #     bgpd_enable_state: "{{ json_response.content | from_json | json_query(bgpd_status_query) }}"
  #     # bgpd_status_query: "Object.FlexDaemons[?Name=='bgpd']"
  #     # all_daemons: "Object.FlexDaemons[*].Name"
  #   register: bgpd_enable_state

  # - debug: msg="BGPd is OFFLINE!"
  #   when: bgpd_enable_state['results'][0]['item'] == false
  
  # - name: "Get LLDPd Enabled setting"
  #   debug: var=item
  #   with_items: "{{ json_response.content | from_json | json_query(lldpd_status_query) }}"
  #   register: lldpd_enable_state

  # - debug: msg="BGPd is OFFLINE!"
  #   when: bgpd_enable_state['results'][0]['item'] == false

  # - debug: msg="LLDPd is ONLINE"
  #   when: lldpd_enable_state['results'][0]['item'] == true

  # - debug: msg="And now this {{ bgpd_enable_state }}"
  #   when: json_response.content | from_json | json_query(Object.FlexDaemons[?Name=='bgpd'].Enable)- name: "Get lacpd Enabled setting"


  - name: "Get lacpd Enabled setting"
    debug: var=item
    with_items: "{{ json_response.content | from_json | json_query(lacpd_status_query) }}"
    register: lacpd_enable_state

  - name: "Get ndpd Enabled setting"
    debug: var=item
    with_items: "{{ json_response.content | from_json | json_query(ndpd_status_query) }}"
    register: ndpd_enable_state

  - name: "Get ribd Enabled setting"
    debug: var=item
    with_items: "{{ json_response.content | from_json | json_query(ribd_status_query) }}"
    register: ribd_enable_state

  - name: "Get fMgrd Enabled setting"
    debug: var=item
    with_items: "{{ json_response.content | from_json | json_query(fMgrd_status_query) }}"
    register: fMgrd_enable_state

  - name: "Get stpd Enabled setting"
    debug: var=item
    with_items: "{{ json_response.content | from_json | json_query(stpd_status_query) }}"
    register: stpd_enable_state

  - name: "Get vxland Enabled setting"
    debug: var=item
    with_items: "{{ json_response.content | from_json | json_query(vxland_status_query) }}"
    register: vxland_enable_state

  - name: "Get confd Enabled setting"
    debug: var=item
    with_items: "{{ json_response.content | from_json | json_query(confd_status_query) }}"
    register: confd_enable_state

  - name: "Get vrrpd Enabled setting"
    debug: var=item
    with_items: "{{ json_response.content | from_json | json_query(vrrpd_status_query) }}"
    register: vrrpd_enable_state

  - name: "Get ospfv2d Enabled setting"
    debug: var=item
    with_items: "{{ json_response.content | from_json | json_query(ospfv2d_status_query) }}"
    register: ospfv2d_enable_state

  - name: "Get asicd Enabled setting"
    debug: var=item
    with_items: "{{ json_response.content | from_json | json_query(asicd_status_query) }}"
    register: asicd_enable_state

  - name: "Get platformd Enabled setting"
    debug: var=item
    with_items: "{{ json_response.content | from_json | json_query(platformd_status_query) }}"
    register: platformd_enable_state

  - name: "Get bfdd Enabled setting"
    debug: var=item
    with_items: "{{ json_response.content | from_json | json_query(bfdd_status_query) }}"
    register: bfdd_enable_state

  - name: "Get arpd Enabled setting"
    debug: var=item
    with_items: "{{ json_response.content | from_json | json_query(arpd_status_query) }}"
    register: arpd_enable_state

  - name: "Get sysmgmtd Enabled setting"
    debug: var=item
    with_items: "{{ json_response.content | from_json | json_query(sysmgmtd_status_query) }}"
    register: sysmgmtd_enable_state

  - name: "Get notifierd Enabled setting"
    debug: var=item
    with_items: "{{ json_response.content | from_json | json_query(notifierd_status_query) }}"
    register: notifierd_enable_state

  - name: "Get lldpd Enabled setting"
    debug: var=item
    with_items: "{{ json_response.content | from_json | json_query(lldpd_status_query) }}"
    register: lldpd_enable_state

  - name: "Get statsd Enabled setting"
    debug: var=item
    with_items: "{{ json_response.content | from_json | json_query(statsd_status_query) }}"
    register: statsd_enable_state

  - name: "Get dhcprelayd Enabled setting"
    debug: var=item
    with_items: "{{ json_response.content | from_json | json_query(dhcprelayd_status_query) }}"
    register: dhcprelayd_enable_state

  - name: "Get dhcpd Enabled setting"
    debug: var=item
    with_items: "{{ json_response.content | from_json | json_query(dhcpd_status_query) }}"
    register: dhcpd_enable_state

  - name: "Get bgpd Enabled setting"
    debug: var=item
    with_items: "{{ json_response.content | from_json | json_query(bgpd_status_query) }}"
    register: bgpd_enable_state

  - debug: msg="lacpd is ONLINE"
    when: lacpd_enable_state['results'][0]['item'] == true
  - debug: msg="ndpd is ONLINE"
    when: ndpd_enable_state['results'][0]['item'] == true
  - debug: msg="ribd is ONLINE"
    when: ribd_enable_state['results'][0]['item'] == true
  - debug: msg="fMgrd is ONLINE"
    when: fMgrd_enable_state['results'][0]['item'] == true
  - debug: msg="stpd is ONLINE"
    when: stpd_enable_state['results'][0]['item'] == true
  - debug: msg="vxland is ONLINE"
    when: vxland_enable_state['results'][0]['item'] == true
  - debug: msg="confd is ONLINE"
    when: confd_enable_state['results'][0]['item'] == true
  - debug: msg="vrrpd is ONLINE"
    when: vrrpd_enable_state['results'][0]['item'] == true
  - debug: msg="ospfv2d is ONLINE"
    when: ospfv2d_enable_state['results'][0]['item'] == true
  - debug: msg="asicd is ONLINE"
    when: asicd_enable_state['results'][0]['item'] == true
  - debug: msg="platformd is ONLINE"
    when: platformd_enable_state['results'][0]['item'] == true
  - debug: msg="bfdd is ONLINE"
    when: bfdd_enable_state['results'][0]['item'] == true
  - debug: msg="arpd is ONLINE"
    when: arpd_enable_state['results'][0]['item'] == true
  - debug: msg="sysmgmtd is ONLINE"
    when: sysmgmtd_enable_state['results'][0]['item'] == true
  - debug: msg="notifierd is ONLINE"
    when: notifierd_enable_state['results'][0]['item'] == true
  - debug: msg="lldpd is ONLINE"
    when: lldpd_enable_state['results'][0]['item'] == true
  - debug: msg="statsd is ONLINE"
    when: statsd_enable_state['results'][0]['item'] == true
  - debug: msg="dhcprelayd is ONLINE"
    when: dhcprelayd_enable_state['results'][0]['item'] == true
  - debug: msg="dhcpd is ONLINE"
    when: dhcpd_enable_state['results'][0]['item'] == true
  - debug: msg="bgpd is ONLINE"
    when: bgpd_enable_state['results'][0]['item'] == true
